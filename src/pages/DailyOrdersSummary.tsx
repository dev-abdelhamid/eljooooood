import React, { useState, useEffect, useMemo, useCallback, Fragment } from 'react';
import { useLanguage } from '../contexts/LanguageContext';
import { useAuth } from '../contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import { Button } from '../components/UI/Button';
import { Upload } from 'lucide-react';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { toast } from 'react-toastify';
import { ordersAPI, branchesAPI, salesAPI } from '../services/api';
import OrderTableSkeleton from '../components/Shared/OrderTableSkeleton';
import { Tooltip } from 'react-tooltip';
import {ProductDropdown} from './NewOrder';

const toArabicNumerals = (number) => {
  const arabicNumerals = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];
  return String(number).replace(/[0-9]/g, (digit) => arabicNumerals[parseInt(digit)]);
};

const formatPrice = (amount, isRtl, isStats = false) => {
  const validAmount = (typeof amount === 'number' && !isNaN(amount)) ? amount : 0;
  let formatted = validAmount.toLocaleString(isRtl ? 'ar-SA' : 'en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
    ...(isStats ? {} : { style: 'currency', currency: 'SAR' })
  });
  if (isRtl && !isStats) {
    formatted = formatted.replace(/\d/g, (d) => String.fromCharCode(0x0660 + parseInt(d)));
  } else if (isRtl && isStats) {
    formatted = `${toArabicNumerals(formatted)} ر.س`;
  } else if (isStats) {
    formatted = `${formatted} SAR`;
  }
  return formatted;
};

const formatNumber = (num, isRtl) => {
  return isRtl ? toArabicNumerals(num) : num.toString();
};

const arrayBufferToBase64 = (buffer) => {
  let binary = '';
  const bytes = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
};

const loadFont = async (doc) => {
  const fontName = 'Amiri';
  const fontUrls = {
    regular: 'https://raw.githubusercontent.com/aliftype/amiri/master/fonts/Amiri-Regular.ttf',
    bold: 'https://raw.githubusercontent.com/aliftype/amiri/master/fonts/Amiri-Bold.ttf',
  };
  try {
    const regularFontBytes = await fetch(fontUrls.regular).then((res) => res.arrayBuffer());
    doc.addFileToVFS(`${fontName}-normal.ttf`, arrayBufferToBase64(regularFontBytes));
    doc.addFont(`${fontName}-normal.ttf`, fontName, 'normal');
    const boldFontBytes = await fetch(fontUrls.bold).then((res) => res.arrayBuffer());
    doc.addFileToVFS(`${fontName}-bold.ttf`, arrayBufferToBase64(boldFontBytes));
    doc.addFont(`${fontName}-bold.ttf`, fontName, 'bold');
    doc.setFont(fontName, 'normal');
    return true;
  } catch (error) {
    console.error('Font loading error:', error);
    doc.setFont('helvetica', 'normal');
    toast.error('Failed to load Amiri font, using default', {
      position: isRtl ? 'top-left' : 'top-right',
      autoClose: 3000,
    });
    return false;
  }
};

const generateFileName = (title, monthName, isRtl) => {
  const date = new Date().toISOString().split('T')[0];
  return `${title}_${monthName}_${date}.pdf`;
};

const generatePDFHeader = (doc, isRtl, title, monthName, totalItems, totalQuantity, totalPrice, fontName, fontLoaded) => {
  doc.setFont(fontLoaded ? fontName : 'helvetica', 'normal');
  doc.setFontSize(18);
  doc.setTextColor(33, 33, 33);
  const pageWidth = doc.internal.pageSize.width;
  doc.text(isRtl ? title : title, isRtl ? pageWidth - 20 : 20, 12, { align: isRtl ? 'right' : 'left' });
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  const stats = isRtl
    ? `إجمالي المنتجات: ${toArabicNumerals(totalItems)} | إجمالي الكمية: ${toArabicNumerals(totalQuantity)} وحدة | إجمالي المبلغ: ${formatPrice(totalPrice, isRtl, true)}`
    : `Total Products: ${totalItems} | Total Quantity: ${totalQuantity} units | Total Amount: ${formatPrice(totalPrice, isRtl, true)}`;
  doc.text(stats, isRtl ? pageWidth - 20 : 20, 20, { align: isRtl ? 'right' : 'left' });
  doc.setLineWidth(0.5);
  doc.setDrawColor(255, 193, 7);
  doc.line(20, 25, pageWidth - 20, 25);
  const pageCount = doc.getNumberOfPages();
  const currentDate = new Date().toLocaleDateString(isRtl ? 'ar-SA' : 'en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.setFont(fontLoaded ? fontName : 'helvetica', 'normal');
    const footerText = isRtl
      ? `تم إنشاؤه بواسطة نظام إدارة الجودياء - ${toArabicNumerals(currentDate)}`
      : `Generated by elgoodia Management System - ${currentDate}`;
    doc.text(footerText, pageWidth / 2, doc.internal.pageSize.height - 10, { align: 'center' });
  }
};

const generatePDFTable = (doc, headers, data, isRtl, fontLoaded, fontName) => {
  const tableColumnWidths = headers.map((_, index) => {
    if (index === 0) return 15; // No.
    if (index === 1) return 25; // Code
    if (index === 2) return 45; // Product
    if (index === 3) return 25; // Unit
    if (index >= 4 && index < headers.length - 2) return 20; // Daily Quantities
    return 30; // Total Quantity, Total Price
  });

  autoTable(doc, {
    head: [isRtl ? headers.slice().reverse() : headers],
    body: isRtl ? data.map(row => row.slice().reverse()) : data,
    theme: 'grid',
    startY: 30,
    margin: { top: 10, bottom: 10, left: 10, right: 10 },
    tableWidth: 'wrap',
    columnStyles: Object.fromEntries(
      headers.map((_, i) => [i, { cellWidth: tableColumnWidths[i], halign: 'center' }])
    ),
    headStyles: {
      fillColor: [255, 193, 7],
      textColor: [33, 33, 33],
      fontSize: 10,
      halign: 'center',
      font: fontLoaded ? fontName : 'helvetica',
      fontStyle: 'bold',
      cellPadding: 4,
    },
    bodyStyles: {
      fontSize: 9,
      halign: 'center',
      font: fontLoaded ? fontName : 'helvetica',
      textColor: [33, 33, 33],
      lineColor: [200, 200, 200],
      fillColor: [255, 255, 255],
      cellPadding: 3,
    },
    alternateRowStyles: { fillColor: [245, 245, 245] },
    didParseCell: (data) => {
      if (data.section === 'body' && data.column.index >= (isRtl ? 0 : headers.length - 2)) {
        data.cell.styles.fontStyle = 'bold';
      }
      if (isRtl) {
        data.cell.text = data.cell.text.map(text => String(text).replace(/[0-9]/g, d => toArabicNumerals(d)));
      }
    },
    didDrawPage: (data) => {
      doc.setFont(fontLoaded ? fontName : 'helvetica', 'normal');
    },
  });
};

const exportToPDF = async (data, title, monthName, headers, isRtl, totalItems, totalQuantity, totalPrice) => {
  try {
    const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
    const fontName = 'Amiri';
    const fontLoaded = await loadFont(doc);
    generatePDFHeader(doc, isRtl, title, monthName, totalItems, totalQuantity, totalPrice, fontName, fontLoaded);
    generatePDFTable(doc, headers, data, isRtl, fontLoaded, fontName);
    const fileName = generateFileName(title, monthName, isRtl);
    doc.save(fileName);
    toast.success(isRtl ? 'تم تصدير ملف PDF بنجاح' : 'PDF exported successfully', {
      position: isRtl ? 'top-left' : 'top-right',
      autoClose: 3000,
    });
  } catch (error) {
    console.error('Error exporting PDF:', error);
    toast.error(isRtl ? 'فشل في تصدير ملف PDF' : 'Failed to export PDF', {
      position: isRtl ? 'top-left' : 'top-right',
      autoClose: 3000,
    });
  }
};

export const DailyOrdersReport = () => {
  const { language, t } = useLanguage();
  const { user } = useAuth();
  const isRtl = language === 'ar';
  const [loading, setLoading] = useState(true);
  const [orderData, setOrderData] = useState({});
  const [branches, setBranches] = useState([]);
  const [selectedMonth, setSelectedMonth] = useState(8); // September 2025
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const currentDate = new Date('2025-10-13T02:39:00+03:00');
  const currentYear = currentDate.getFullYear();

  const months = useMemo(() => Array.from({ length: 12 }, (_, i) => ({
    value: i,
    label: new Date(currentYear, i).toLocaleString(language, { month: 'long' }),
  })), [currentYear, language]);

  const getDaysInMonth = useCallback((month) => {
    const daysInMonthCount = new Date(currentYear, month + 1, 0).getDate();
    return Array.from({ length: daysInMonthCount }, (_, i) => {
      const date = new Date(currentYear, month, i + 1);
      return date.toLocaleString(language, { day: 'numeric', month: 'short' });
    });
  }, [currentYear, language]);

  const daysInMonth = useMemo(() => getDaysInMonth(selectedMonth), [selectedMonth, getDaysInMonth]);

  const allBranches = useMemo(() => branches.map(b => b.displayName).sort(), [branches]);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const [ordersResponse, branchesResponse, salesResponse] = await Promise.all([
          ordersAPI.getAll({ status: 'completed', page: 1, limit: 1000 }, isRtl),
          branchesAPI.getAll(),
          salesAPI.getAnalytics({
            startDate: new Date(currentYear, selectedMonth, 1).toISOString(),
            endDate: new Date(currentYear, selectedMonth + 1, 0).toISOString(),
            lang: language,
          }),
        ]);

        const monthlyOrderData = {};
        const fetchedBranches = branchesResponse
          .filter(branch => branch && branch._id)
          .map(branch => ({
            _id: branch._id,
            name: branch.name || (isRtl ? 'غير معروف' : 'Unknown'),
            nameEn: branch.nameEn || branch.name,
            displayName: isRtl ? branch.name : branch.nameEn || branch.name,
          }))
          .sort((a, b) => a.displayName.localeCompare(b.displayName, language));
        setBranches(fetchedBranches);

        const branchMap = new Map(fetchedBranches.map(b => [b._id, b.displayName]));
        const productDetails = new Map();
        
        // Process orders
        let orders = Array.isArray(ordersResponse) ? ordersResponse : [];
        if (orders.length === 0) {
          orders = salesResponse.productSales?.map(item => ({
            status: 'completed',
            createdAt: new Date().toISOString(),
            branch: {
              displayName: fetchedBranches[Math.floor(Math.random() * fetchedBranches.length)]?.displayName || (isRtl ? 'الفرع الرئيسي' : 'Main Branch'),
            },
            items: [{
              displayProductName: isRtl ? (item.product?.name || 'منتج غير معروف') : (item.product?.nameEn || item.product?.name || 'Unknown Product'),
              quantity: Math.abs(Number(item.totalQuantity) || 0),
              price: Number(item.product?.price) || 0,
              productId: item.productId,
              unit: isRtl ? (item.product?.unit || 'غير محدد') : (item.product?.unitEn || item.product?.unit || 'N/A'),
              sales: Number(item.totalQuantity) * Number(item.product?.price) * 0.1 || 0,
            }],
          })) || [];
        }

        orders.forEach(order => {
          const productId = order.items[0]?.productId;
          if (!productDetails.has(productId)) {
            productDetails.set(productId, {
              code: order.items[0]?.product?.code || `code-${Math.random().toString(36).substring(2)}`,
              product: isRtl ? (order.items[0]?.product?.name || 'منتج غير معروف') : (order.items[0]?.product?.nameEn || order.items[0]?.product?.name || 'Unknown Product'),
              unit: isRtl ? (order.items[0]?.product?.unit || 'غير محدد') : (order.items[0]?.product?.unitEn || order.items[0]?.product?.unit || 'N/A'),
              price: Number(order.items[0]?.price) || 0,
            });
          }
        });

        for (let month = 0; month < 12; month++) {
          const daysInMonthCount = new Date(currentYear, month + 1, 0).getDate();
          const orderMap = new Map();
          orders.forEach(order => {
            const status = order.status || order.orderStatus;
            if (status !== 'completed') return;
            const date = new Date(order.createdAt || order.date);
            if (isNaN(date.getTime())) return;
            const orderMonth = date.getMonth();
            const year = date.getFullYear();
            if (year === currentYear && orderMonth === month) {
              const day = date.getDate() - 1;
              const branch = order.branch?.displayName || order.branch?.name || order.branchId || (isRtl ? 'الفرع الرئيسي' : 'Main Branch');
              order.items?.forEach(item => {
                const productId = item.product?._id || item.productId;
                if (!productId) return;
                const details = productDetails.get(productId) || {
                  code: item.product?.code || `code-${Math.random().toString(36).substring(2)}`,
                  product: isRtl ? (item.product?.name || 'منتج غير معروف') : (item.product?.nameEn || item.product?.name || 'Unknown Product'),
                  unit: isRtl ? (item.product?.unit || 'غير محدد') : (item.product?.unitEn || item.product?.unit || 'N/A'),
                  price: Number(item.price) || 0,
                };
                const key = `${productId}-${month}`;
                if (!orderMap.has(key)) {
                  orderMap.set(key, {
                    id: key,
                    code: details.code,
                    product: details.product,
                    unit: details.unit,
                    dailyOrders: Array(daysInMonthCount).fill(0),
                    branchQuantities: {},
                    totalQuantity: 0,
                    totalPrice: 0,
                    actualSales: 0,
                  });
                }
                const row = orderMap.get(key);
                const quantity = Number(item.quantity) || 0;
                row.dailyOrders[day] += quantity;
                row.branchQuantities[branch] = (row.branchQuantities[branch] || 0) + quantity;
                row.totalQuantity += quantity;
                row.totalPrice += quantity * details.price;
              });
            }
          });

          if (month === selectedMonth) {
            for (const row of orderMap.values()) {
              const salesItem = salesResponse.productSales?.find(s => s.productId === row.id.split('-')[0]);
              if (salesItem) {
                row.actualSales = Number(salesItem.totalQuantity) || 0;
              }
            }
          }

          monthlyOrderData[month] = Array.from(orderMap.values()).sort((a, b) => b.totalQuantity - a.totalQuantity);
        }

        setOrderData(monthlyOrderData);
      } catch (error) {
        console.error('Failed to fetch data:', error);
        toast.error(isRtl ? 'فشل في جلب البيانات' : 'Failed to fetch data', {
          position: isRtl ? 'top-left' : 'top-right',
          autoClose: 3000,
        });
      } finally {
        setLoading(false);
      }
    };
    if (user?.role === 'admin' || user?.role === 'production') {
      fetchData();
    }
  }, [isRtl, currentYear, selectedMonth, language, user?.role]);

  const filteredData = useMemo(() => {
    let data = orderData[selectedMonth] || [];
    if (selectedProduct) {
      data = data.filter(row => row.id.split('-')[0] === selectedProduct.value);
    }
    if (searchTerm) {
      data = data.filter(row => 
        row.product.toLowerCase().includes(searchTerm.toLowerCase()) ||
        row.code.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    return data;
  }, [orderData, selectedMonth, selectedProduct, searchTerm]);

  const renderOrderTable = useCallback((data, title, month) => {
    const totalQuantities = allBranches.reduce((acc, branch) => {
      acc[branch] = data.reduce((sum, row) => sum + (row.branchQuantities[branch] || 0), 0);
      return acc;
    }, {});
    const grandTotalQuantity = data.reduce((sum, row) => sum + row.totalQuantity, 0);
    const grandTotalPrice = data.reduce((sum, row) => sum + row.totalPrice, 0);
    const grandActualSales = data.reduce((sum, row) => sum + row.actualSales, 0);
    const monthName = months[month].label;

    const exportTable = (format) => {
      const headers = [
        isRtl ? 'الكود' : 'Code',
        isRtl ? 'المنتج' : 'Product',
        isRtl ? 'وحدة المنتج' : 'Product Unit',
        ...daysInMonth,
        isRtl ? 'الكمية الإجمالية' : 'Total Quantity',
        isRtl ? 'المبيعات الفعلية' : 'Actual Sales',
        isRtl ? 'السعر الإجمالي' : 'Total Price',
      ];
      const rows = [
        ...data.map(row => ({
          code: row.code,
          product: row.product,
          unit: row.unit,
          ...Object.fromEntries(row.dailyOrders.map((qty, i) => [daysInMonth[i], qty])),
          totalQuantity: row.totalQuantity,
          actualSales: row.actualSales,
          totalPrice: formatPrice(row.totalPrice, isRtl),
        })),
        {
          code: '',
          product: isRtl ? 'الإجمالي' : 'Total',
          unit: '',
          ...Object.fromEntries(daysInMonth.map((_, i) => [daysInMonth[i], data.reduce((sum, row) => sum + row.dailyOrders[i], 0)])),
          totalQuantity: grandTotalQuantity,
          actualSales: grandActualSales,
          totalPrice: formatPrice(grandTotalPrice, isRtl),
        },
      ];
      const dataRows = rows.map(row => [
        row.code,
        row.product,
        row.unit,
        ...daysInMonth.map(day => row[day]),
        row.totalQuantity,
        row.actualSales,
        row.totalPrice,
      ]);

      if (format === 'excel') {
        const ws = XLSX.utils.json_to_sheet(isRtl ? rows.map(row => Object.fromEntries(Object.entries(row).reverse())) : rows, { header: headers });
        if (isRtl) ws['!views'] = [{ RTL: true }];
        ws['!cols'] = [
          { wch: 15 }, { wch: 25 }, { wch: 15 },
          ...daysInMonth.map(() => ({ wch: 12 })),
          { wch: 15 }, { wch: 15 }, { wch: 15 }
        ];
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, `${title}_${monthName}`);
        XLSX.writeFile(wb, `${title}_${monthName}.xlsx`);
        toast.success(isRtl ? 'تم تصدير ملف Excel بنجاح' : 'Excel exported successfully', {
          position: isRtl ? 'top-left' : 'top-right',
          autoClose: 3000,
        });
      } else if (format === 'pdf') {
        exportToPDF(dataRows, title, monthName, headers, isRtl, data.length, grandTotalQuantity, grandTotalPrice);
      }
    };

    if (loading) return <OrderTableSkeleton isRtl={isRtl} />;
    if (data.length === 0) {
      return (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.3 }}
          className="text-center py-12 bg-white shadow-md rounded-xl border border-gray-200"
        >
          <p className="text-gray-500 text-sm font-medium">{isRtl ? 'لا توجد بيانات' : 'No data available'}</p>
        </motion.div>
      );
    }

    return (
      <div className="mb-8">
        <div className={`flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 ${isRtl ? 'flex-row-reverse' : ''}`}>
          <h2 className="text-lg font-semibold text-gray-800">{isRtl ? `${title} - ${monthName}` : `${title} - ${monthName}`}</h2>
          <div className="flex gap-2">
            <Button
              variant={data.length > 0 ? 'primary' : 'secondary'}
              onClick={data.length > 0 ? () => exportTable('excel') : undefined}
              className={`flex items-center gap-2 rounded-full px-4 py-2 text-xs font-medium transition-all duration-200 ${
                data.length > 0 ? 'bg-blue-600 hover:bg-blue-700 text-white shadow-sm' : 'bg-gray-200 text-gray-500 cursor-not-allowed'
              }`}
              disabled={data.length === 0}
            >
              <Upload className="w-4 h-4" />
              {isRtl ? 'تصدير إكسل' : 'Export Excel'}
            </Button>
            <Button
              variant={data.length > 0 ? 'primary' : 'secondary'}
              onClick={data.length > 0 ? () => exportTable('pdf') : undefined}
              className={`flex items-center gap-2 rounded-full px-4 py-2 text-xs font-medium transition-all duration-200 ${
                data.length > 0 ? 'bg-green-600 hover:bg-green-700 text-white shadow-sm' : 'bg-gray-200 text-gray-500 cursor-not-allowed'
              }`}
              disabled={data.length === 0}
            >
              <Upload className="w-4 h-4" />
              {isRtl ? 'تصدير PDF' : 'Export PDF'}
            </Button>
          </div>
        </div>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
          className="overflow-x-auto rounded-xl shadow-md border border-gray-200 bg-white"
        >
          <table className="min-w-full divide-y divide-gray-200 text-xs">
            <thead className="bg-blue-50 sticky top-0">
              <tr className={isRtl ? 'flex-row-reverse' : ''}>
                <th className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[80px]">{isRtl ? 'الكود' : 'Code'}</th>
                <th className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[120px]">{isRtl ? 'المنتج' : 'Product'}</th>
                <th className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[80px]">{isRtl ? 'وحدة المنتج' : 'Product Unit'}</th>
                {daysInMonth.map((day, i) => (
                  <th key={i} className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[80px]">{day}</th>
                ))}
                <th className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[100px]">{isRtl ? 'الكمية الإجمالية' : 'Total Quantity'}</th>
                <th className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[100px]">{isRtl ? 'المبيعات الفعلية' : 'Actual Sales'}</th>
                <th className="px-4 py-3 font-semibold text-gray-700 text-center min-w-[100px]">{isRtl ? 'السعر الإجمالي' : 'Total Price'}</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {data.map(row => (
                <tr key={row.id} className={`hover:bg-blue-50 transition-colors duration-200 ${isRtl ? 'flex-row-reverse' : ''}`}>
                  <td className="px-4 py-3 text-gray-700 text-center truncate">{row.code}</td>
                  <td className="px-4 py-3 text-gray-700 text-center truncate">{row.product}</td>
                  <td className="px-4 py-3 text-gray-700 text-center truncate">{row.unit}</td>
                  {row.dailyOrders.map((qty, i) => (
                    <td
                      key={i}
                      className={`px-4 py-3 text-center font-medium ${
                        qty !== 0 ? 'bg-green-50 text-green-700' : 'text-gray-700'
                      }`}
                      data-tooltip-id="order-tooltip"
                      data-tooltip-content={`${isRtl ? 'الطلبات في ' : 'Orders on '} ${daysInMonth[i]}: ${formatNumber(qty, isRtl)}`}
                    >
                      {qty !== 0 ? formatNumber(qty, isRtl) : '0'}
                    </td>
                  ))}
                  <td className="px-4 py-3 text-gray-700 text-center font-medium">{formatNumber(row.totalQuantity, isRtl)}</td>
                  <td className="px-4 py-3 text-gray-700 text-center font-medium">{formatNumber(row.actualSales, isRtl)}</td>
                  <td className="px-4 py-3 text-gray-700 text-center font-medium">{formatPrice(row.totalPrice, isRtl)}</td>
                </tr>
              ))}
              <tr className={`font-semibold bg-gray-50 ${isRtl ? 'flex-row-reverse' : ''}`}>
                <td className="px-4 py-3 text-gray-800 text-center" colSpan={3}>{isRtl ? 'الإجمالي' : 'Total'}</td>
                {daysInMonth.map((_, i) => (
                  <td key={i} className="px-4 py-3 text-gray-800 text-center">
                    {formatNumber(data.reduce((sum, row) => sum + row.dailyOrders[i], 0), isRtl)}
                  </td>
                ))}
                <td className="px-4 py-3 text-gray-800 text-center">{formatNumber(grandTotalQuantity, isRtl)}</td>
                <td className="px-4 py-3 text-gray-800 text-center">{formatNumber(grandActualSales, isRtl)}</td>
                <td className="px-4 py-3 text-gray-800 text-center">{formatPrice(grandTotalPrice, isRtl)}</td>
              </tr>
            </tbody>
          </table>
          <Tooltip id="order-tooltip" place="top" effect="solid" className="custom-tooltip" />
        </motion.div>
      </div>
    );
  }, [loading, isRtl, daysInMonth, months, allBranches, formatPrice]);

  if (user?.role !== 'admin' && user?.role !== 'production') {
    return (
      <div className="text-center py-12">
        <p className="text-red-500 text-lg font-medium">{isRtl ? 'غير مصرح لك بالوصول إلى هذه الصفحة' : 'You are not authorized to access this page'}</p>
      </div>
    );
  }

  return (
    <div className={`min-h-screen px-6 py-8 ${isRtl ? 'rtl font-amiri' : 'ltr font-inter'} bg-gray-100`}>
      <h1 className="text-3xl font-bold text-gray-900 mb-8">{isRtl ? 'تقرير الطلبات اليومية' : 'Daily Orders Report'}</h1>
      <div className="mb-8 bg-white shadow-md rounded-xl p-4">
        <div className="flex flex-wrap gap-4 mb-4 justify-between items-center">
          <div className="flex flex-wrap gap-2">
            {months.map(month => (
              <Button
                key={month.value}
                variant={selectedMonth === month.value ? 'primary' : 'secondary'}
                onClick={() => setSelectedMonth(month.value)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                  selectedMonth === month.value ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                {month.label}
              </Button>
            ))}
          </div>
          <div className="flex gap-4 items-center">
            <ProductDropdown
              value={selectedProduct}
              onChange={setSelectedProduct}
              placeholder={isRtl ? 'اختر منتج' : 'Select Product'}
              className="w-64"
            />
            <input
              type="text"
              placeholder={isRtl ? 'ابحث بالمنتج أو الكود' : 'Search by product or code'}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="px-4 py-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>
      <AnimatePresence>
        {renderOrderTable(filteredData, isRtl ? 'تقرير الطلبات اليومية' : 'Daily Orders Report', selectedMonth)}
      </AnimatePresence>
    </div>
  );
};

export default DailyOrdersReport;